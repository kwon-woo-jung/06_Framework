package common.config;

import javax.sql.DataSource;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.context.ApplicationContext;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

/*
 * @Configuration
 * - 스프링 설정용 클래스임을 명시 (스프링이 해당 클래스를 설정 정보로 인식하고 사용)
 * 	+ 객체로 생성해서 내부 코드를 서버 실행시 모두 바로 실행
 * 
 * 
 * @PropertySource("경로")
 * - 지정된 경로의 properties 파일 내용을 읽어와 사용
 * - 사용할 properties 파일이 다수일 경우
 * 해당 어노테이션 연속해서 작성 가능
 * 
 * -classpath:/	는 src/main/resources 경로를 의미
 * 
 *	@Autiwured
 *	- 등록된 Bean 중에서
 *	  타입이 일치하거나, 상속 관계에 있는 Bean을
 *	  지정된 필드에 주입
 *	  == 의존성 주입(DI) 
 * 
 * */







@Configuration
@PropertySource("classpath:/config.properties")
public class DBConfig {
	
	// 필드
	
	// import org.springframwork.context.ApplicationContext
	// 필드
	@Autowired // (DI, 의존성 주입)
	private ApplicationContext applicationContext; // application scope 객체 : 즉, 현재 프로젝트 
	// -> 스프링이 관리하고있는 ApplicationContext 객체를 의존성 주입 받는다
	// -> 현재 프로젝트의 전반적인 설정과 Bean 관리에 접근할 수 있도록 해줌.
	
	
	@Bean
	@ConfigurationProperties(prefix = "spring.datasource.hikari")
	public HikariConfig hikariConfig() {
	return new HikariConfig();
	}
	
	@Bean
	public DataSource dataSource(HikariConfig config) {
	DataSource dataSource = new HikariDataSource(config);
	return dataSource;
	}
	
	
	
	
	
	
}







