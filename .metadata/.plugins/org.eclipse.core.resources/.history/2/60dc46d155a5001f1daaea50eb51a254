package edu.kh.demo.controller;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import jakarta.servlet.http.HttpServletRequest;
import lombok.extern.slf4j.Slf4j;

@Controller // 요청/응답 제어 역할 명시 + Bean 등록 ( Bean : Spring이 만들고 관리하는 객체)
@RequestMapping("param")	 // /param으로 시작하는 요청을
								// 현재 컨트롤러로 매핑
@Slf4j // log를 이용한 메시지 출력 시 사용 (Lombok 제공) 
public class ParameterController {
//	Controller 메서드에서 HttpServletRequest를 매개변수로 선언하면, Spring이 요청 객체를 자동으로 주입해줍니다.
//	@Slf4j : 어노테이션을 통해 Lombok 라이브러리가 제공하는 log 객체를 생성해, 디버그 수준의 로그를 출력할 수 있습니다.
	
//	log.debug() 메서드는 디버깅 목적의 로그를 기록하는데 사용합니다.
//	로그를 통해 해당 파라미터 값들이 제대로 들어왔는지 확인할 수 있어 디버깅에 유용합니다.
// 	리다이렉트(Redirect)
//	return "redirect:/param/main"; 구문은 현재 요청이 끝나고 /param/main URL로 새로운 요청을 보내도록 리다이렉트합니

	
	@GetMapping("main")		// /param/main GET 방식 요청 매핑
	public String paramMain() {
		
		// 접두사 : classpath:/templates/
		// 접미사 : .html
		// 접두사 + return 값 + 접미사
		// -> src/main/resources/templates/param/param-main.html
		return "param/param-main";
	}
	
	/*
	 * 1. HttpServletRequest :
	 * - 요청 클라이언트 정보, 제출된 파라미터 등을 저장한 객체
	 * - 클라이언트 요청 시 생성
	 * 
	 * Spring 의 Controller 메서드 작성 시 
	 * 매개변수에 원하는 객체를 작성을 하면
	 * 존재하는 객체를 바인딩 또는 없으면 생성해서 바인딩
	 * 
	 * --> ArgumentResolver (전달 인자 해결사)
	 * */
	
	
	
	@PostMapping("test1")		// /param/test1
	public String paramTest1(HttpServletRequest req) { 
		// HttpServletRequest는 서블릿에서 제공하는 객체로, 클라이언트의 요청 정보를 저장
		
		String inputName = req.getParameter("inputName");
		String inputAddress = req.getParameter("inputAddress");
		int inputAge = Integer.parseInt(req.getParameter("inputAge"));
		
		// req.getParameter : 메서드를 사용하면 클라이언트가 전송한 특정 파라미터 값을 String으로 가져올 수 있습니다.
		// 예를 들어, inputName, inputAddress, inputAge와 같은 파라미터를 각각 받아와 변수에 저장합니다.
		
		// debug : 코드 오류 해결
		// -> 코드 오류는 없는데 정상 수행이 안될 때
		// -> 값이 잘못된 경우 -> 값 추적
		log.debug("inputName : " + inputName);
		log.debug("inputAddress : " + inputAddress);
		log.debug("inputAge : " + inputAge);
		
		/* Spring에서 Redirect(재요청) 하는 방법!
		 * 
		 * - Controller 메서드 반환 값에
		 * 	"redirect:요청주소"; 	작성
		 *
		 * */
		return "redirect:/param/main";
//		redirect 는 파일명이 아닌 요청주소를 적어야 함 그러면 재요청이 됨
//		주소창(페이지)이 깜빡인다는 것은 요청 보내졌다는 뜻 (redirect)
	}
	
	
//	@Slf4j은 메서드단에 붙이면 에러남 반드시 클래스단에 붙여야함
	
	/*	2.	@RequestParam 어노테이션 - 낱개 파라미터 얻어오기
	 * 
	 * - request 객체를 이용한 파라미터 전달 어노테이션
	 * - 매개변수 앞에 해당 어노테이션을 작성하면, 매개면수에 값이 주입됨.
	 * - 주입되는 데이터는 매개변수의 타입이 맞게 형변환/파싱이 자동으로 수행됨!
	 * 
	 * 
	 * 
	 * 
	 * */
	
	
	@PostMapping("test2")			//	/param/test2
	public String paramTest2(@RequestParam("title") String title,
							@RequestParam("writer") String writer,
							@RequestParam("price")	int price,
							@RequestParam("publisher") String publishe) {
		
		
		
		log.debug("title : " + title);
		log.debug("title : " + writer);
		log.debug("title : " + price);
		log.debug("title : " + publishe);
		
		
		
		return "redirect:/param/main";
	}
	
	
	
	
	
	
	
	
	
}
